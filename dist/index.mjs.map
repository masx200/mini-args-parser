{"version":3,"file":"index.mjs","sources":["../lib/index.js","../lib/parseargs.js"],"sourcesContent":["import assert from \"assert\";\nimport { parseargs } from \"./parseargs.js\";\n/**\n * @param {string[]} args\n * @returns {Object}\n */\nexport default function parse(args) {\n    assert(Array.isArray(args));\n    const result = parseargs(args);\n    const others = args.filter((a) => {\n        return typeof a === \"string\" && !a.startsWith(\"-\");\n    });\n    result[Symbol.iterator] = others[Symbol.iterator].bind(others);\n    return result;\n}\n","/**\n * @param {string[]} args\n * @returns {Object}\n */\nfunction parseargs(args) {\n    const 参数obj = Object.create(null);\n    args.filter((s) => s.startsWith(\"--\"))\n        .map((s) => /--(?<key>.+?)=(?<value>.+)/g.exec(s))\n        .forEach((execArray) => {\n            const groups = execArray?.groups;\n            const key = groups?.key;\n            const value = groups?.value;\n            if (key && value) {\n                参数obj[key] = value;\n            }\n        });\n    return 参数obj;\n}\nexport { parseargs };\n"],"names":["parse","args","assert","Array","isArray","result","参数obj","Object","create","filter","s","startsWith","map","_wrapRegExp","key","value","exec","forEach","execArray","groups","parseargs","others","a","Symbol","iterator","bind"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe,SAASA,EAAMC;IAC1BC,EAAOC,MAAMC,QAAQH;IACrB,IAAMI,ICJV,SAAmBJ;QACf,IAAMK,IAAQC,OAAOC,OAAO;QAW5B,OAVAP,EAAKQ,QAAQC,KAAMA,EAAEC,WAAW,QAC3BC,KAAKF,KAAMG,EAAA,uBAAA;YAAAC,KAAA;YAAAC,OAAA;WAA8BC,KAAKN,KAC9CO,SAASC;YACN,IAAMC,IAASD,iBAAAA,IAAAA,EAAWC,QACpBL,IAAMK,iBAAAA,IAAAA,EAAQL,KACdC,IAAQI,iBAAAA,IAAAA,EAAQJ;YAClBD,KAAOC,MACPT,EAAMQ,KAAOC;AAChB,aAEFT;AACV,KDTkBc,CAAUnB,IACnBoB,IAASpB,EAAKQ,QAAQa,KACJ,mBAANA,MAAmBA,EAAEX,WAAW;IAGlD,OADAN,EAAOkB,OAAOC,YAAYH,EAAOE,OAAOC,UAAUC,KAAKJ,IAChDhB;AACV;;"}