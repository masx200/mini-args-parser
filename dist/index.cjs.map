{"version":3,"file":"index.cjs","sources":["../lib/index.js","../lib/parseargs.js"],"sourcesContent":["import assert from \"assert\";\nimport { parseargs } from \"./parseargs.js\";\n/**\n * @param {string[]} args\n * @returns {Object}\n */\nexport default function parse(args) {\n    assert(Array.isArray(args));\n    const result = parseargs(args);\n    const others = args.filter((a) => {\n        return typeof a === \"string\" && !a.startsWith(\"-\");\n    });\n    result[Symbol.iterator] = others[Symbol.iterator].bind(others);\n    return result;\n}\n","/**\n * @param {string[]} args\n * @returns {Object}\n */\nfunction parseargs(args) {\n    const 参数obj = Object.create(null);\n    args.filter((s) => s.startsWith(\"--\"))\n        .map((s) => /--(?<key>.+?)=(?<value>.+)/g.exec(s))\n        .forEach((execArray) => {\n            const groups = execArray?.groups;\n            const key = groups?.key;\n            const value = groups?.value;\n            if (key && value) {\n                参数obj[key] = value;\n            }\n        });\n    return 参数obj;\n}\nexport { parseargs };\n"],"names":["args","assert","Array","isArray","result","参数obj","Object","create","filter","s","startsWith","map","exec","forEach","execArray","groups","key","value","parseargs","others","a","Symbol","iterator","bind"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAMe,SAAeA;IAC1BC,UAAOC,MAAMC,QAAQH;QACfI,ICJV,SAAmBJ;YACTK,IAAQC,OAAOC,OAAO;eAC5BP,EAAKQ,QAAO,SAACC;mBAAMA,EAAEC,WAAW;YAC3BC,KAAI,SAACF;;;;eAAoCG,KAAKH;YAC9CI,SAAQ,SAACC;gBACAC,IAASD,QAAAA,aAAAA,EAAWC,QACpBC,IAAMD,QAAAA,aAAAA,EAAQC,KACdC,IAAQF,QAAAA,aAAAA,EAAQE;YAClBD,KAAOC,MACPZ,EAAMW,KAAOC;aAGlBZ;KDRQa,CAAUlB,IACnBmB,IAASnB,EAAKQ,QAAO,SAACY;eACJ,mBAANA,MAAmBA,EAAEV,WAAW;;WAElDN,EAAOiB,OAAOC,YAAYH,EAAOE,OAAOC,UAAUC,KAAKJ,IAChDf"}